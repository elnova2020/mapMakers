{"version":3,"sources":["services/storageService.js","services/mapService.js","pages/Map.jsx","routes.js","cmps/AppHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["storageService","store","key","value","sessionStorage","JSON","stringify","load","defaultValue","parse","clear","mapService","query","getPlaces","places","KEY","gPlaces","addPlace","place","unshift","name","lat","lng","address","a","baseUrl","axios","get","res","data","results","geometry","location","console","log","_MapContainer","state","activeMarker","selectedPlace","addresseName","isWrongLoc","onMapClicked","showingInfoWindow","setState","loadPlaces","onAddMarker","ev","preventDefault","addressForQuerry","replace","newLoc","onHandleChange","target","this","className","action","onSubmit","type","placeholder","onChange","google","props","initialCenter","onClick","zoom","style","position","width","height","margin","bottom","map","idx","Component","routes","path","component","GoogleApiWrapper","apiKey","AppHeader","withRouter","App","route","exact","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c24f647.chunk.js","sourcesContent":["export const storageService = {\r\n    store,\r\n    load,\r\n    clear\r\n}\r\n\r\nfunction store(key, value) {\r\n    sessionStorage[key] = JSON.stringify(value);\r\n}\r\n\r\nfunction load(key, defaultValue = null) {\r\n    let value = sessionStorage[key];\r\n    if (!value) return defaultValue\r\n    else return JSON.parse(value);\r\n}\r\n\r\n\r\nfunction clear() {\r\n    sessionStorage.clear()\r\n}\r\n\r\n","\r\nimport axios from 'axios'\r\nimport { storageService } from '../services/storageService'\r\n\r\nexport const mapService = {\r\n    query,\r\n    getPlaces,\r\n    addPlace\r\n}\r\n\r\nconst KEY = 'PLACES'\r\n\r\nvar gPlaces = [\r\n    { name: 'Tel-Aviv: dizingov, 23', lat: 32.0750224, lng: 34.7749395 },\r\n    { name: 'Haifa, Derech Simha Golan 54', lat: 32.789711, lng: 35.0078224 }\r\n]\r\n\r\n\r\nasync function query(address) {\r\n    try{\r\n        const baseUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${address}&key=AIzaSyCH-jmqS38VxKTB2yaaz9xPB95yW3TyeG4`;\r\n        var res = await axios.get(baseUrl)\r\n        return res.data.results[0].geometry.location\r\n    }catch(err){\r\n        console.log('Could not get places ' , err);\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nfunction getPlaces() {\r\n\r\n    const places = _loadPlacesFromStorage()\r\n    if(!places){\r\n        return gPlaces\r\n    }\r\n    return places\r\n}\r\n\r\n\r\nfunction addPlace(place) {\r\n    gPlaces.unshift(place)\r\n    _savePlaceToStorage();\r\n}\r\n\r\n\r\nfunction _savePlaceToStorage() {\r\n    storageService.store(KEY, gPlaces)\r\n}\r\n\r\nfunction _loadPlacesFromStorage() {\r\n    return storageService.load(KEY)\r\n}","import { Component } from 'react'\r\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\r\nimport { mapService } from '../services/mapService'\r\n\r\n\r\n\r\nexport class _MapContainer extends Component {\r\n\r\n  state = {\r\n    activeMarker: {},\r\n    selectedPlace: {},\r\n    addresseName: '',\r\n    places: [],\r\n    isWrongLoc: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadPlaces()\r\n  }\r\n\r\n\r\n  onMapClicked = () => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false,\r\n        activeMarker: null\r\n      })\r\n    }\r\n  };\r\n\r\n\r\n  loadPlaces = () => {\r\n    var places = mapService.getPlaces()\r\n    this.setState({\r\n      ...this.state,\r\n      places\r\n\r\n    })\r\n  }\r\n\r\n\r\n\r\n  onAddMarker = async (ev) => {\r\n    ev.preventDefault()\r\n    try {\r\n      var addressForQuerry = this.state.addresseName.replace(/\\s/g, \"%20\");\r\n\r\n      const newLoc = await mapService.query(addressForQuerry)\r\n      this.setState({\r\n        ...this.state,\r\n        places: [...this.state.places, { name: this.state.addresseName, lat: newLoc.lat, lng: newLoc.lng }],\r\n        isWrongLoc: false\r\n      }, () => {\r\n        mapService.addPlace({ name: this.state.addresseName, lat: newLoc.lat, lng: newLoc.lng })\r\n      })\r\n\r\n    } catch (err) {\r\n      console.log('Could not add marker' , err);\r\n      this.setState({\r\n        ...this.state,\r\n        isWrongLoc: true\r\n      })      \r\n    }\r\n\r\n  }\r\n\r\n\r\n  onHandleChange = ({ target }) => {\r\n    this.setState({\r\n      ...this.state,\r\n      addresseName: target.value\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    const { places , isWrongLoc } = this.state\r\n    if (!places) return <div>Loading...</div>\r\n    return (\r\n      <section className=\"page-map\">\r\n\r\n        <form className=\"page-map-form flex align-center justify-center\" action=\"\" onSubmit={this.onAddMarker} >\r\n          <input className=\"page-map-input\" type=\"text\" placeholder=\"Type location\" onChange={this.onHandleChange} />\r\n          <button>Add Marker</button>\r\n        </form>\r\n\r\n        {isWrongLoc && <div className=\"page-map-wrong-loc\">You have entered a wrong location , please try again.</div>}\r\n\r\n        <Map\r\n          google={this.props.google}\r\n          initialCenter={{ lat: 32.0750224, lng: 34.7749395 }}\r\n          onClick={this.onMapClicked}\r\n          zoom={7}\r\n          style={{ position: 'relative', width: '85%', height: '700px', margin: 'auto', bottom: '0' }}>\r\n          {places.map((place, idx) => <Marker key={idx} name={place.name} position={{ lat: place.lat, lng: place.lng }} />)}\r\n        </Map>\r\n\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport const MapContainer = GoogleApiWrapper({\r\n  apiKey: ('AIzaSyCH-jmqS38VxKTB2yaaz9xPB95yW3TyeG4')\r\n})(_MapContainer)\r\n\r\n\r\n","import { MapContainer } from './pages/Map'\r\n\r\n\r\nexport const routes = [\r\n\r\n    {\r\n        path: '/',\r\n        component: MapContainer\r\n    },\r\n]","\r\nimport { withRouter } from 'react-router-dom'\r\n\r\n\r\n\r\nfunction _AppHeader() {\r\n    return (\r\n        <nav className=\"appHeader-nav-color\" >\r\n            <div className=\"appHeader-nav flex justify-between container\">\r\n                <h1 className=\"flex align-center justify-center\">MapMarkers</h1>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nexport const AppHeader = withRouter(_AppHeader)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\nimport {HashRouter as Switch,Route} from 'react-router-dom'\n\n\nimport React from 'react'\n\n\nimport { routes } from './routes'\nimport { AppHeader } from './cmps/AppHeader'\nimport '../src/assets/styles/styles.scss'\n\n\n\nexport class App extends React.Component {\n  render() {\n    return (\n      <main>\n        <AppHeader />\n        <Switch>\n          {routes.map(route => <Route key={route.path} exact component={route.component} path={route.path} />)}\n        </Switch>\n      </main>\n    )\n  }\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter as Router} from 'react-router-dom'\n\n\n\n\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}